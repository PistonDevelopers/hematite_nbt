// Data structure snippet. Use include!() to get these definitions.

#[derive(Debug, PartialEq, Deserialize)]
pub struct Small1 {
    name: String
}

#[derive(Debug, PartialEq, Deserialize)]
pub struct Small2Sub {
    #[serde(rename = "1")] one: i8,
    #[serde(rename = "2")] two: i16,
    #[serde(rename = "3")] three: i32,
}

#[derive(Debug, PartialEq, Deserialize)]
pub struct Small2 {
    aaa: Small2Sub,
    bbb: Small2Sub,
}

#[derive(Debug, PartialEq, Deserialize)]
pub struct Small3Sub {
    ccc: i32,
    name: String,
}

#[derive(Debug, PartialEq, Deserialize)]
pub struct Small3 {
    bbb: Vec<Small3Sub>,
}

#[derive(Debug, PartialEq, Deserialize)]
pub struct Small4Sub {
    aaa: i8,
    bbb: i8,
    ccc: i8,
    ddd: i8,
}

#[derive(Debug, PartialEq, Deserialize)]
pub struct Small4 {
    c1: Small4Sub,
    c2: Small4Sub,
}

#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub struct Big1Sub1 {
    name: String,
    #[serde(rename = "created-on")] created_on: i64,
}

#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub struct Big1Sub2 {
    name: String,
    value: f32,
}

#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub struct Big1Sub3 {
    ham: Big1Sub2,
    egg: Big1Sub2,
}

#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub struct Big1 {
    #[serde(rename = "listTest (compound)")] list_test_compound: Vec<Big1Sub1>,
    #[serde(rename = "longTest")] long_test: i64,
    #[serde(rename = "shortTest")] short_test: i32,
    #[serde(rename = "byteTest")] byte_test: i8,
    #[serde(rename = "floatTest")] float_test: f32,
    #[serde(rename = "nested compound test")] nested_compound_test: Big1Sub3,
    #[serde(rename = "byteArrayTest (the first 1000 values of (n*n*255+n*7)%100, starting with n=0 (0, 62, 34, 16, 8, ...))")]
    byte_array_test: Vec<i8>, // [i8; 1000] does not implement PartialEq.
    #[serde(rename = "stringTest")] string_test: String,
    #[serde(rename = "listTest (long)")]
    list_test_long: [i64; 5], // Vec<i64> also works.
    #[serde(rename = "doubleTest")] double_test: f64,
    #[serde(rename = "intTest")] int_test: i32,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct Level {
    #[serde(rename = "Data")]
    pub data: LevelData
}

#[derive(Debug, Serialize, Deserialize)]
pub struct LevelData {
    #[serde(rename = "RandomSeed")] seed: i64,
    #[serde(rename = "DayTime")] daytime: i64,
    #[serde(rename = "Player")] player: PlayerData,
    initialized: bool,
    version: i32,
    #[serde(rename = "allowCommands")] allow_commands: bool,
    #[serde(rename = "LastPlayed")] last_played: i64,
    #[serde(rename = "SpawnZ")] spawn_z: i32,
    #[serde(rename = "SpawnX")] spawn_x: i32,
    #[serde(rename = "SpawnY")] spawn_y: i32,
    #[serde(rename = "LevelName")] name: String,
    #[serde(rename = "MapFeatures")] map_features: bool,

    #[serde(rename = "GameType")] game_type: i32,
    #[serde(rename = "Difficulty")] difficulty: i8,
    #[serde(rename = "DifficultyLocked")] difficulty_locked: bool,

    #[serde(rename = "generatorName")] generator_name: String,
    #[serde(rename = "generatorOptions")] generator_options: String,
    #[serde(rename = "generatorVersion")] generator_version: i32,

    #[serde(rename = "Time")] time: i64,
    #[serde(rename = "clearWeatherTime")] clear_weather_time: i32,
    #[serde(rename = "thunderTime")] thunder_time: i32,
    #[serde(rename = "rainTime")] rain_time: i32,

    thundering: bool,
    raining: bool,
    hardcore: bool,

    #[serde(rename = "GameRules")] game_rules: GameRules,
    #[serde(rename = "SizeOnDisk")] size_on_disk: i64,

    #[serde(rename = "BorderCenterX")] border_center_x: f64,
    #[serde(rename = "BorderCenterY")] border_center_y: Option<f64>,
    #[serde(rename = "BorderCenterZ")] border_center_z: f64,
    #[serde(rename = "BorderWarningBlocks")] border_warning_blocks: f64,
    #[serde(rename = "BorderWarningTime")] border_warning_time: f64,
    #[serde(rename = "BorderSafeZone")] border_safe_zone: f64,
    #[serde(rename = "BorderSize")] border_size: f64,
    #[serde(rename = "BorderSizeLerpTarget")] border_size_lerp_target: f64,
    #[serde(rename = "BorderSizeLerpTime")] border_size_lerp_time: i64,
    #[serde(rename = "BorderDamagePerBlock")] border_damage_per_block: f64,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct PlayerData {
    #[serde(rename = "PersistentId")] persistant_id: Option<i32>,
    #[serde(rename = "playerGameType")] game_type: i32,
    abilities: PlayerAbilityData,
    #[serde(rename = "Score")] score: Option<i32>,

    #[serde(rename = "Dimension")] dimension: i32,
    #[serde(rename = "OnGround")] on_ground: bool,
    #[serde(rename = "FallDistance")] fall_distance: f32,
    #[serde(rename = "Motion")] motion: Vec<f64>, // [f64; 3]
    #[serde(rename = "Pos")] position: Vec<f64>, // [f64; 3]
    #[serde(rename = "Rotation")] rotation: Vec<f32>, // [f32; 2]

    #[serde(rename = "SpawnX")] spawn_x: i32,
    #[serde(rename = "SpawnY")] spawn_y: i32,
    #[serde(rename = "SpawnZ")] spawn_z: i32,
    #[serde(rename = "SpawnForced")] spawn_forced: Option<bool>,

    #[serde(rename = "PortalCooldown")] portal_cooldown: Option<i32>,
    #[serde(rename = "Invulnerable")] invulnerable: Option<bool>,

    #[serde(rename = "AttackTime")] attack_time: Option<i16>,
    #[serde(rename = "HurtTime")] hurt_time: i16,
    #[serde(rename = "HurtByTimestamp")] hurt_by: Option<i32>,
    #[serde(rename = "DeathTime")] death_time: i16,
    #[serde(rename = "Sleeping")] sleeping: bool,
    #[serde(rename = "SleepTimer")] sleep_timer: i16,

    #[serde(rename = "Health")] health: i16,
    #[serde(rename = "HealF")] heal: Option<f32>,
    #[serde(rename = "foodLevel")] food_level: i32,
    #[serde(rename = "foodTickTimer")] food_tick_timer: i32,
    #[serde(rename = "foodSaturationLevel")] food_saturation_level: f32,
    #[serde(rename = "foodExhaustionLevel")] food_exhaustion_level: f32,

    #[serde(rename = "Fire")] fire: i16,
    #[serde(rename = "Air")] air: i16,

    #[serde(rename = "XpP")] xp_p: f32,
    #[serde(rename = "XpLevel")] xp_level: i32,
    #[serde(rename = "XpTotal")] xp_total: i32,
    #[serde(rename = "XpSeed")] xp_seed: Option<i32>,

    #[serde(rename = "Inventory")] inventory: Vec<InventoryEntry>,
    #[serde(rename = "EnderItems")] ender_items: Vec<i8>,

    #[serde(rename = "SelectedItemSlot")] selected_item_slot: Option<i32>,
    #[serde(rename = "SelectedItem")] selected_item: Option<InventoryEntry>,
    #[serde(rename = "UUIDLeast")] uuid_least: Option<i64>,
    #[serde(rename = "UUIDMost")] uuid_most: Option<i64>,
    #[serde(rename = "AbsorptionAmount")] absorbtion_amount: Option<f32>,
    #[serde(rename = "Attributes")] attributes: Option<Vec<AttributeEntry>>,
    #[serde(rename = "ActiveEffects")] active_effects: Option<Vec<ActiveEffect>>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct PlayerAbilityData {
    invulnerable: bool,
    instabuild: bool,
    flying: bool,
    #[serde(rename = "flySpeed")] fly_speed: f32,
    #[serde(rename = "walkSpeed")] walk_speed: f32,
    #[serde(rename = "mayBuild")] may_build: bool,
    #[serde(rename = "mayfly")] may_fly: bool,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct InventoryEntry {
    id: String,
    #[serde(rename = "Slot")] slot: Option<i8>,
    #[serde(rename = "Count")] count: i8,
    #[serde(rename = "Damage")] damage: i16,
    #[serde(rename = "tag")] info: Option<InventoryEntryInfo>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct InventoryEntryInfo {
    display: Option<InventoryEntryDisplay>,
    #[serde(rename = "RepairCost")] repair_cost: Option<i32>,
    #[serde(rename = "ench")] enchantments: Vec<Enchantment>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct InventoryEntryDisplay {
    #[serde(rename = "Name")] name: String,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct Enchantment {
    id: i16,
    #[serde(rename = "lvl")] level: i16,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct EnderItemsEntry {
    id: String,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct AttributeEntry {
    #[serde(rename = "Name")] name: String,
    #[serde(rename = "Base")] base: f64,
    #[serde(rename = "Modifiers")] modifiers: Option<Vec<AttributeModifier>>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct AttributeModifier {
    #[serde(rename = "Name")] name: String,
    #[serde(rename = "Amount")] amount: f64,
    #[serde(rename = "Operation")] operation: i32,
    #[serde(rename = "UUIDLeast")] uuid_least: i64,
    #[serde(rename = "UUIDMost")] uuid_most: i64,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct ActiveEffect {
    #[serde(rename = "Id")] id: i8,
    #[serde(rename = "Duration")] base: i32,
    #[serde(rename = "Ambient")] ambient: bool,
    #[serde(rename = "Amplifier")] amplifier: bool,
    #[serde(rename = "ShowParticles")] show_particles: bool,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct GameRules {
    #[serde(rename = "doMobLoot")] mob_loot: String,
    #[serde(rename = "doTileDrops")] tile_drops: String,
    #[serde(rename = "doFireTick")] fire_tick: String,
    #[serde(rename = "mobGriefing")] mob_griefing: String,
    #[serde(rename = "commandBlockOutput")] command_block_output: String,
    #[serde(rename = "doMobSpawning")] mob_spawning: String,
    #[serde(rename = "keepInventory")] keep_inventory: String,
    #[serde(rename = "showDeathMessages")] show_death_messages: String,
    #[serde(rename = "doEntityDrops")] entity_drops: String,
    #[serde(rename = "naturalRegeneration")] natural_regeneration: String,
    #[serde(rename = "logAdminCommands")] log_admin_commands: String,
    #[serde(rename = "doDaylightCycle")] daylight_cycle: String,
    #[serde(rename = "sendCommandFeedback")] send_command_feedback: String,
    #[serde(rename = "randomTickSpeed")] random_tick_speed: String,
    #[serde(rename = "reducedDebugInfo")] reduced_debug_info: String,
}
